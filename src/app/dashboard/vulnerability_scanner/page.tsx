"use client";

import { useState} from "react";
import { usePathname } from "next/navigation";
import { useRouter } from "next/navigation";
import vulnerabilityData from "../../../public/vulnerability_test_data.json"; // Import the JSON file

const navItems = [
  { name: "Home", path: "/dashboard" },
  { name: "IP Scanner", path: "/dashboard/ip_scanner" },
  { name: "Vulnerability Scanner", path: "/dashboard/vulnerability_scanner" },
  { name: "Encrypt/Decrypt", path: "/dashboard/enc_dec" },
];

export default function ScannerPage() {
  const [url, setUrl] = useState("");
  const pathname = usePathname();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  interface VulnerabilityResult {
    alert: string;
    description: string;
    risk: "Critical" | "High" | "Medium" | "Low";
    solution: string;
  }

  const [results, setResults] = useState<VulnerabilityResult[]>([]);
  const [scanProgress, setScanProgress] = useState(0);
  const [estimatedTime, setEstimatedTime] = useState(300); // Minimum 5 minutes in seconds
  const [scanMessages, setScanMessages] = useState<string[]>([]);
  const router = useRouter();

  const vulnerabilities = vulnerabilityData.vulnerabilities;

  // Function to start the scan
  const startScan = () => {
    if (!url) {
      setError("Please enter a valid URL");
      return;
    }
    setError("");
    setLoading(true);
    setScanProgress(0);
    setResults([]);
    setScanMessages([]);

    // Set scan duration (5 minutes, adjustable)
    const randomDuration = 300; // Change to desired seconds (e.g., 60 for 1 minute, 30 for 30 seconds)
    setEstimatedTime(randomDuration);

    // Simulate scanning with progress and messages
    simulateScan(randomDuration);
  };

  // Simulate the scanning process
  const simulateScan = (duration: number) => {
    let progress = 0;
    const interval = setInterval(() => {
      progress += Math.random() * 5; // Increment progress randomly
      if (progress >= 100) {
        progress = 100;
        clearInterval(interval);
        setLoading(false);
        generateReport();
      }
      setScanProgress(progress);

      // Add random scan message
      const randomVuln = vulnerabilities[Math.floor(Math.random() * vulnerabilities.length)];
      const messages = [
        `Checking ${url} for ${randomVuln.name}...`,
        `Scanning ${url} for potential ${randomVuln.severity} severity issues in ${randomVuln.name}...`,
        `Analyzing ${url} for ${randomVuln.name} vulnerabilities...`,
        `Probing ${url} for ${randomVuln.description}...`,
        `Testing ${url} against ${randomVuln.name} exploits...`,
      ];
      const randomMessage = messages[Math.floor(Math.random() * messages.length)];
      setScanMessages((prev) => [...prev.slice(-5), randomMessage]); // Keep last 5 messages
    }, 2000); // Update every 2 seconds

    // Stop scan after duration
    setTimeout(() => {
      clearInterval(interval);
      setScanProgress(100);
      setLoading(false);
      generateReport();
    }, duration * 1000);
  };

  // Generate random report
  const generateReport = () => {
    const reportResults = vulnerabilities
      .filter(() => Math.random() > 0.7) // Randomly select some vulnerabilities
      .map((vuln) => ({
        alert: `${vuln.name} on ${url}`,
        description: vuln.description,
        risk: vuln.severity as "Critical" | "High" | "Medium" | "Low",
        solution: `Mitigate ${vuln.name} by applying secure configurations or patches.`,
      }));

    setResults(reportResults.length ? reportResults : []);
  };

  // Format estimated time without decimals
  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60); // Round down to avoid decimals
    return `${minutes}m${secs}s`;
  };

  // Categorize results by risk
  const categorizedResults: Record<"Critical" | "High" | "Medium" | "Low", VulnerabilityResult[]> = {
    Critical: results.filter((result) => result.risk === "Critical"),
    High: results.filter((result) => result.risk === "High"),
    Medium: results.filter((result) => result.risk === "Medium"),
    Low: results.filter((result) => result.risk === "Low"),
  };

  return (
    <div className="min-h-screen bg-black text-gray-100">
      {/* Navbar */}
      <nav className="flex justify-between items-center px-10 py-5 bg-zinc-900 shadow-lg border-b border-zinc-700">
        <h1 className="text-6xl font-bold text-purple-400">CyberWise</h1>
        <button className="px-3 py-2 bg-purple-500 text-white rounded-lg shadow-md hover:bg-purple-600 transition">
          Latest Updates
        </button>
      </nav>

      {/* Navigation Items */}
      <div className="bg-zinc-900 w-3/4 ml-44 rounded-bl-3xl rounded-br-3xl justify-center border border-zinc-700">
        <div className="flex justify-center space-x-16 text-lg font-semibold text-gray-300 px-6 py-3">
          {navItems.map((item, index) => (
            <span
              key={index}
              onClick={() => router.push(item.path)}
              className={`cursor-pointer transition-colors px-4 py-2 rounded-lg ${
                pathname === item.path ? "text-purple-400 bg-zinc-800" : "hover:text-purple-400"
              }`}
            >
              {item.name}
            </span>
          ))}
        </div>
      </div>

      {/* Main Content */}
      <div className="flex flex-col items-center py-10 px-6 sm:px-10 bg-black min-h-screen transition-all">
        <div className="shadow-lg p-6 rounded-lg w-full max-w-2xl">
          <h1 className="mt-10 text-5xl text-center font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 mb-8">
            CyberWise Vulnerability Scanner
          </h1>
          <input
            type="text"
            className="w-full p-2 border rounded-xl mb-4 text-black"
            placeholder="Enter URL to scan"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            disabled={loading}
          />
          <button
            onClick={startScan}
            className="mt-3 w-36 h-8 ml-60 bg-white rounded-lg text-black transition-all duration-300 focus:outline-none transform hover:scale-105 hover:bg-gradient-to-r hover:from-blue-500 hover:to-purple-500"
            disabled={loading}
          >
            {loading ? "Scanning..." : "Search"}
          </button>

          {error && <p className="text-red-500 mt-4">{error}</p>}

          {/* Loading Bar and Scan Messages */}
          {loading && (
            <div className="mt-6 w-full">
              <h2 className="text-lg font-semibold text-purple-400">
                Scanning {url}...
              </h2>
              <div className="w-full bg-zinc-800 rounded-full h-4 mt-2">
                <div
                  className="bg-gradient-to-r from-purple-500 to-blue-500 h-4 rounded-full transition-all duration-500"
                  style={{ width: `${scanProgress}%` }}
                ></div>
              </div>
              <p className="text-sm text-gray-400 mt-2">
                Estimated time remaining: {formatTime(estimatedTime - (scanProgress / 100) * estimatedTime)}
              </p>
              <div className="mt-4 p-4 bg-zinc-900 rounded-lg">
                <h3 className="text-md font-semibold text-gray-300">Scan Activity:</h3>
                <ul className="mt-2 space-y-1 text-sm text-gray-400">
                  {scanMessages.map((message, index) => (
                    <li key={index} className="animate-pulse">
                      {message}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          )}

          {/* Scan Results */}
          {!loading && results.length > 0 && (
            <div className="mt-6 w-full">
              <h2 className="text-lg font-semibold text-purple-400">Scan Results for {url}:</h2>
              {(["Critical", "High", "Medium", "Low"] as const).map((riskLevel) => (
                categorizedResults[riskLevel].length > 0 && (
                  <div key={riskLevel} className="mt-4">
                    <h3
                      className={`text-md font-semibold p-2 rounded-t-lg ${
                        riskLevel === "Critical"
                          ? "bg-red-600"
                          : riskLevel === "High"
                          ? "bg-orange-600"
                          : riskLevel === "Medium"
                          ? "bg-yellow-600"
                          : "bg-green-600"
                      } text-white`}
                    >
                      {riskLevel} Risk Vulnerabilities
                    </h3>
                    <ul className="space-y-2 bg-zinc-800 rounded-b-lg p-4">
                      {categorizedResults[riskLevel].map((alert, index) => (
                        <li
                          key={index}
                          className="p-4 border border-zinc-700 rounded-lg bg-zinc-900 shadow-md"
                        >
                          <p className="font-semibold text-purple-400">{alert.alert}</p>
                          <p className="text-sm text-gray-300">{alert.description}</p>
                          <p className="text-xs text-gray-400">Risk: {alert.risk}</p>
                          <p className="text-xs text-gray-400">Solution: {alert.solution}</p>
                        </li>
                      ))}
                    </ul>
                  </div>
                )
              ))}
            </div>
          )}

          {!loading && results.length === 0 && !error && scanProgress === 100 && (
            <p className="text-green-500 mt-6">No vulnerabilities found for {url}!</p>
          )}
        </div>
      </div>
    </div>
  );
}